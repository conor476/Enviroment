@using PagedList.Mvc;
@model X.PagedList.StaticPagedList<Enviroment.Models.Ticket>
@{
    ViewData["Title"] = "Ticket List";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no">
    <title>Home - Brand</title>
    <link rel="stylesheet" href="assets/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat:400,400i,700,700i,600,600i&amp;display=swap">
    <link rel="stylesheet" href="assets/css/baguetteBox.min.css">
    <link rel="stylesheet" href="assets/css/vanilla-zoom.min.css">

    <title>@ViewData["Title"]</title>
    <style>
        body {
            font-family: Montserrat;
            margin: 0;
            padding: 0;
            background-color: whitesmoke;
        }

        .side-pane {
            position: absolute;
            left: 0;
            top: 80px; 
            width: 280px;
            height: calc(100% - 80px); 
            background-color: rgba(9, 162, 255, 0.85);
            padding: 0px;
            box-sizing: border-box;
        }

            .side-pane a, .side-pane form {
                display: block;
                margin-bottom: 0px;
            }

        .content-area {
            margin-left: 280px; 
            padding-top: 60px; 
            padding-left: 0px; 
            padding-right: 0px; 
            width: calc(100% - 280px); 
        }

        h2 {
            color: #333;
            text-align: center;
        }

        .btn-fixed-width {
            width: 100px; 
        }

        .btn {
            border: none;
            padding: 10px 20px;
            margin-right: 5px;
            text-decoration: none;
            color: white;
            border-radius: 5px;
            cursor: pointer;
        }

        .btn-primary {
            background-color: Lightgreen;
            
        }

        .btn-info {
            background-color: #17a2b8;
        }

        .btn-warning {
            background-color: #ffc107;
        }

        .btn-danger {
            background-color: #dc3545;
        }

        .table {
            width: 99%;
            margin: 20px auto;
            border-collapse: collapse;
            max-width: 150px; /* Adjust as needed */
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .table th, .table td {
            padding: 5px;
            border: 1px solid #ddd;
            text-align: left;
            
        }

        .table thead {
            background-color: #333;
            color: darkgrey;
        }

        .table tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        .table tr:hover {
            background-color: #ddd;
        }

        form {
            text-align: center;
            margin-bottom: 10px;
        }

        .form-actions {
            padding: 10px;
        }

        input[type="text"], input[type="submit"] {
            padding: 5px;
            margin: 5px;
            border-radius: 5px;
            border: 1px solid #ddd;
        }

        input[type="submit"] {
            background-color: #333;
            color: D1C8E1;
            cursor: pointer;
        }

    </style>
</head>
<body>
    <div class="side-pane">
        <!-- Search and Filter Form -->
        <form asp-action="Index" method="get">
            <div class="form-actions no-color">
                <p>
                    <input type="text" name="searchString" value="@ViewData["CurrentFilter"]" placeholder="Search Tickets" />
                    <input type="submit" value="Search" class="btn btn-default" />
                </p>

                <!-- Ticket Type Filter -->
                <div class="filter-group">
               
                    <div class="filter-options">
                        <p>Type Filter:</p>
                        <div class="option">
                            <input type="radio" id="incident" name="typeFilter" value="Incident" @(ViewBag.TypeFilter == "Incident" ? "checked" : "")>
                            <label for="incident">Incident</label>
                        </div>
                        <div class="option">
                            <input type="radio" id="serviceRequest" name="typeFilter" value="Service Request" @(ViewBag.TypeFilter == "Service Request" ? "checked" : "")>
                            <label for="serviceRequest">Service Request</label>
                        </div>
                        <div class="option">
                            <input type="radio" id="allTypes" name="typeFilter" value="" @(string.IsNullOrEmpty(ViewBag.TypeFilter) ? "checked" : "")>
                            <label for="allTypes">All</label>
                        </div>
                    </div>
                </div>

                <!-- Status Filters -->
                <div class="filter-group">
                    <div class="filter-options">
                        <p>Status Filter:</p>
                        <div class="checkbox-container">
                            <input type="checkbox" id="newStatus" name="isNewChecked" @(ViewBag.IsNewChecked ? "checked" : "")>
                            <label for="newStatus">New</label><br>
                        </div>
                        <div class="option">
                            <input type="checkbox" id="statusOpen" name="status" value="Open" @(ViewBag.CurrentStatus == "Open" ? "checked" : "")>
                            <label for="statusOpen">Open</label>
                        </div>
                        <div class="option">
                            <input type="checkbox" id="statusClosed" name="status" value="Closed" @(ViewBag.CurrentStatus == "Closed" ? "checked" : "")>
                            <label for="statusClosed">Closed</label>
                        </div>
                        <div class="option">
                            <input type="checkbox" id="statusSuspended" name="status" value="Suspended" @(ViewBag.CurrentStatus == "Suspended" ? "checked" : "")>
                            <label for="statusSuspended">Suspended</label>
                        </div>
                 
                    </div>
                </div>

                <style>
                    .filter-group {
                        margin-bottom: 15px;
                    }

                    .filter-options {
                        display: flex;
                        flex-direction: column;
                        align-items: flex-start;
                    }

                    .option {
                        margin-bottom: 5px;
                    }
                </style>


             

                <!-- Sort Order Button -->
                <p>
                    <input type="hidden" name="sortDescending" value="@(ViewBag.SortDescending ? "false" : "true")">
                    <button type="submit" class="btn btn-default">@((ViewBag.SortDescending) ? "Sort Ascending" : "Sort Descending")</button>
                </p>

                <div id="emailList">
                    <!-- Emails will be inserted here -->
                </div>

                <!-- Existing Check Emails button... -->
                <form onsubmit="event.preventDefault(); checkEmails();">
                    <button type="submit" class="btn btn-primary">Check Emails</button>
                </form>
            </div>
        </form>

        <!-- Create Button -->
        <a asp-action="Create" class="btn btn-primary">Create New Ticket</a>

        <!-- Pagination Controls -->
        @if (Model.PageNumber > 1)
        {
            <a href="@Url.Action("Index", new { page = Model.PageNumber - 1, searchString = ViewBag.CurrentFilter, status = ViewBag.CurrentStatus, sortDescending = ViewBag.SortDescending, typeFilter = ViewBag.TypeFilter, isNewChecked = ViewBag.IsNewChecked })" class="btn btn-default">Load Previous Ten Results</a>
        }
        @if (Model.PageNumber < Model.PageCount)
        {
            <a href="@Url.Action("Index", new { page = Model.PageNumber + 1, searchString = ViewBag.CurrentFilter, status = ViewBag.CurrentStatus, sortDescending = ViewBag.SortDescending, typeFilter = ViewBag.TypeFilter, isNewChecked = ViewBag.IsNewChecked })" class="btn btn-default">Load Next Ten Results</a>
        }

    </div>

    <div class="content-area">
        <h2>Tickets</h2>

        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Customer Name</th>
                    <th>Email</th>
                    <th>Employee Name</th>
                    <th>Summary</th>
                    <th>Type</th>
                    <th>Category</th>
                    <th>Status</th>
                    <th>Priority</th>
                    <th>Team</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ticket in Model)
                {
                    <tr>
                        <td>@ticket.TicketID</td>
                        <td>@ticket.CustomerName</td>
                        <td>@ticket.EmailAddress</td>
                        <td>@ticket.EmployeeName</td>
                        <td>@ticket.Summary</td>
                        <td>@ticket.Type</td>
                        <td>@ticket.Category</td>
                        <td style="@GetBackgroundColor(ticket.Status)">@ticket.Status</td>
                        <td>@ticket.PriorityLevel</td>
                        <td>@ticket.Team</td>
                        <td>
                            <a asp-action="Edit" asp-route-id="@ticket.TicketID" class="btn btn-warning btn-fixed-width">Edit</a>
                            <a asp-action="Delete" asp-route-id="@ticket.TicketID" class="btn btn-danger btn-fixed-width">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    <div style="height: 50px;"></div>
 
</body>
<script>
    // This function could be called when the "Check Emails" button is clicked or on a set interval
    function checkEmails() {
        $.ajax({
            url: '@Url.Action("CheckEmails", "Ticket")',
            type: 'POST',
            success: function (data) {
                // Assuming 'data' contains the new emails
                // Update the page with the new emails
                $('#emailList').html(data);
            },
            error: function (error) {
                // Handle errors here
                console.error("Error fetching emails:", error);
            }
        });
    }

    // Example of setting up a polling interval
    // This will check for emails every 5 minutes
    setInterval(checkEmails, 6000); // 300000 ms = 5 minutes
</script>
</html>

@functions {
    private string GetBackgroundColor(string status)
    {
        switch (status)
        {
            case "Open":
                return "background-color: #90ee90;";
            case "Suspended":
                return "background-color: #FCFF5C;";
            case "Closed":
                return "background-color: #F3686D;";
            default:
                return "";
        }
    }
}
